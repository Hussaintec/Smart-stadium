package com.example.screen;



import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;

import android.graphics.Color;
import android.graphics.drawable.GradientDrawable;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import androidx.appcompat.app.AppCompatActivity;


public class MainActivity extends AppCompatActivity {

    private static final int REQUEST_ENABLE_BT = 456;

    private BluetoothAdapter bluetoothAdapter = null;
    private BluetoothClient bluetoothClient = null;


    private TextView lblConnectedDevice;
    private ImageView door,light,door1,light1;



    private Button connect;
    boolean [] img=new boolean[4];



    @Override
    public void onDestroy() {

        super.onDestroy();
        bluetoothClient.close();

        Toast.makeText( MainActivity.this, "HC-05 is disconnected", Toast.LENGTH_LONG ).show();
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        for(int i = 0; i < 4; i++) {

        Arrays.fill(img, Boolean.FALSE);

        }
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        door = findViewById( R.id.imageView1 );

       light = findViewById( R.id.imageView3 );
        door1 = findViewById( R.id.imageView4 );

      //  light1 = findViewById( R.id.imageView5 );
        connect = findViewById( R.id.button2 );
        door.setOnClickListener( imageviewListener );

        light.setOnClickListener( imageviewListener );
        door1.setOnClickListener( imageviewListener );

     //   light1.setOnClickListener( imageviewListener );

        connect.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if(connect.getText().equals("CONNECT")){
                    connectHC05();
               //     bluetoothClient.writeChar( 'S' );
                    connect.setText("DISCONNECT");}else{
                    bluetoothClient.close();
                    connect.setText("CONNECT");
                    Toast.makeText( MainActivity.this, "HC-05 is disconnected", Toast.LENGTH_LONG ).show();
                }
            }
        });


     //   deviceList = findViewById( R.id.deviceList);

        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
       if( ! bluetoothAdapter.isEnabled() ) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
        }


    //    connectHC05();

    }

    private void connectHC05(){

     //   BluetoothDevice device = bluetoothAdapter.getRemoteDevice("98:D3:31:FB:71:BA");
        BluetoothDevice device = bluetoothAdapter.getRemoteDevice("98:D3:31:FD:8C:68");

        bluetoothClient = new BluetoothClient( device );

     //   lblConnectedDevice.setText( "Connected to " + device.getName() );
     //   lblConnectedDevice.setText( " " );
       bluetoothClient.start();
    }


    private View.OnClickListener imageviewListener = new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            if ( bluetoothClient == null ){

                Toast.makeText( MainActivity.this,"Please connect to BT", Toast.LENGTH_LONG ).show();
                return;}
            char code = 's';
            if(connect.getText().equals("CONNECT")){
                Toast.makeText( MainActivity.this,"Please connect to BT", Toast.LENGTH_LONG ).show();}
            else{
            final GradientDrawable myGrad = (GradientDrawable)view.getBackground();
            myGrad.setColor(Color.BLACK);
            switch( view.getId() ) {
                case R.id.imageView1:
                   // if (img[0])
                        change(myGrad, Color.GREEN, 'B');
                    new CountDownTimer(5000, 1000) {
                        public void onFinish() {
                            myGrad.setColor(Color.WHITE);
                        }

                        public void onTick(long millisUntilFinished) {
                            // millisUntilFinished    The amount of time until finished.
                        }
                    }.start();
                 //   else change(myGrad, Color.RED, 'B');
                  //  img[0] = !img[0];
                    break;
                case R.id.imageView3:
                  //  if (img[1])
                        change(myGrad, Color.GREEN, 'A');

                 //   else change(myGrad, Color.RED, 'D');
                    new CountDownTimer(5000, 1000) {
                        public void onFinish() {
                            myGrad.setColor(Color.WHITE);
                        }

                        public void onTick(long millisUntilFinished) {
                            // millisUntilFinished    The amount of time until finished.
                        }
                    }.start();
                 //   img[1] = !img[1];
                    break;
                case R.id.imageView4:
                    if (img[2]) change(myGrad, Color.GREEN, 'F');
                    else change(myGrad, Color.RED, 'H');
                    img[2] = !img[2];
                    break;
              /*  case R.id.imageView5:
                    if (img[3]) change(myGrad, Color.GREEN, 'G');
                    else change(myGrad, Color.RED, 'E');
                    img[3] = !img[3];
                    break;*/



            }
            }
           //   lblConnectedDevice.setText("");




        }
    };
    public void change(GradientDrawable drawable,int color,char a){
        bluetoothClient.writeChar( a );
        drawable.setColor(color);
    }



    private class BluetoothClient extends Thread {

        private BluetoothDevice bluetoothDevice;
        private BluetoothSocket bluetoothSocket;
        private InputStream inputStream;
        private OutputStream outputStream;
        private boolean isAlive = true;
        public  int i=0;

        public BluetoothClient( BluetoothDevice device ) {
            try {

                bluetoothDevice = device;

                bluetoothSocket = device.createRfcommSocketToServiceRecord( device.getUuids()[0].getUuid() );
                bluetoothSocket.connect();

                inputStream = bluetoothSocket.getInputStream();
                outputStream = bluetoothSocket.getOutputStream();

                Toast.makeText( MainActivity.this, device.getName() + " connected", Toast.LENGTH_LONG ).show();
            } catch ( IOException exception ) {
                Log.e( "DEBUG", "Cannot establish connection", exception );
                Toast.makeText( MainActivity.this, device.getName() + " Cannot establish connection", Toast.LENGTH_LONG ).show();
            }
        }

        private void setText(final TextView text,final String value){
            runOnUiThread(new Runnable() {
                @Override
                public void run() {

                    text.setText(text.getText()+value);}

            });
        }
        private void clearText(final TextView text){
            runOnUiThread(new Runnable() {
                @Override
                public void run() {

                    text.setText("");}

            });
        }
        // Inutile dans le code actuel. Mais cela permettrait de recevoir
        // des informations du vÃ©hicule dans une future version.
        @Override
        public void run() {

            //   Toast.makeText( MainActivity.this, "no", Toast.LENGTH_LONG ).show();
            byte[] buffer = new byte[2048];  // buffer store for the stream
            int bytes;
            ArrayList<View> rootView = new ArrayList<View>();

            rootView.add(door);

            rootView.add(light);

            while (true) {
                try {


                    outputStream = bluetoothSocket.getOutputStream();
                    inputStream = bluetoothSocket.getInputStream();


                    if(inputStream.available()>0){
                        bytes = inputStream.read(buffer);
                        String readMessage = new String(buffer, 0, bytes);
                        if(readMessage.contains("@")){
                            change_background(rootView,readMessage,img);
                            setText(lblConnectedDevice,readMessage);
                        }else{
                           //  lblConnectedDevice.setText(readMessage);
                            setText(lblConnectedDevice,readMessage);



                            }}
                    else{
                        Thread.sleep(100);
                    }



                } catch (Exception exception) {
                    Log.e("DEBUG", "Cannot read data", exception);
                    //   close();

                }
            }
        }
        public void writeString(String text) {

            try {
                outputStream.write(text.getBytes());
                outputStream.flush();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        public void writeChar(char code) {

            try {

                outputStream.write( code );

                outputStream.flush();

            } catch (IOException e) {
                Log.e( "DEBUG", "Cannot write message", e );
            }
        }

        // Termine la connexion en cours et tue le thread
        public void close() {
            try {
                bluetoothSocket.close();

                isAlive = false;
            } catch (IOException e) {
                Log.e( "DEBUG", "Cannot close socket", e );
            }
        }

        private void change_background(final ArrayList<View> view,final String read,final boolean [] img) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
            int color = 0;
            String[] arrOfStr = read.split("-");
            for (int i = 1; i < 5; i++) {
                switch(arrOfStr[i])
                {
                    case "0":
                        color=(Color.RED);
                        img[i-1]=Boolean.TRUE;
                        break;
                    case "1":
                        color=(Color.GREEN);
                        img[i-1]=Boolean.FALSE;
                        break;
                }
                GradientDrawable myGrad = (GradientDrawable) view.get(i-1).getBackground();
                myGrad.setColor(color);
            }
        }


});
    }

}}

